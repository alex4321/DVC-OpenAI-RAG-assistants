# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_assistants.ipynb.

# %% auto 0
__all__ = ['CharacterDescription', 'CharactersCollection', 'load_characters', 'process']

# %% ../nbs/00_assistants.ipynb 2
import argparse
import os
import sys
from typing import List, Dict
import openai
import pandas as pd
from pydantic import BaseModel
from yaml import safe_load

# %% ../nbs/00_assistants.ipynb 3
class CharacterDescription(BaseModel):
    character_id: int
    name: str
    who_am: str
    goals: str
    ideas: str
    style_description: str
    style_examples: List[str]


class CharactersCollection(BaseModel):
    characters: List[CharacterDescription]

# %% ../nbs/00_assistants.ipynb 4
def load_characters(file_name: str) -> List[CharacterDescription]:
    with open(file_name, "r", encoding="utf-8") as src:
        yaml_parsed = safe_load(src)
        return CharactersCollection.model_validate(yaml_parsed).characters

# %% ../nbs/00_assistants.ipynb 6
def _read_text_file(file_name: str) -> str:
    with open(file_name, "r", encoding="utf-8") as src:
        return src.read().strip()

# %% ../nbs/00_assistants.ipynb 8
_ACTION_DELETE = "delete"
_ACTION_CREATE = "create"
_ACTION_UPDATE = "update"


def _load_assistants_dataframe(file_name: str) -> pd.DataFrame:
    if os.path.exists(file_name):
        df_assistants = pd.read_csv(file_name)
    else:
        df_assistants = pd.DataFrame({"character_id": [], "assistant_id": []})
        df_assistants = df_assistants.astype({"character_id": "int64", "assistant_id": "str"})
    return df_assistants


def _mark_actions(df_assistants: pd.DataFrame, character_by_id: Dict[str, CharacterDescription]) -> pd.DataFrame:
    df_assistants["action"] = None
    df_assistants.loc[~df_assistants["character_id"].isin(character_by_id), "action"] = _ACTION_DELETE
    df_assistants.loc[df_assistants["character_id"].isin(character_by_id), "action"] = _ACTION_UPDATE
    new_character_ids = [id for id in character_by_id if id not in df_assistants["character_id"]]
    df_assistants = pd.concat([
        df_assistants,
        pd.DataFrame({
            "assistant_id": [None] * len(new_character_ids),
            "character_id": new_character_ids,
            "action": ["create"] * len(new_character_ids),
        })
    ])
    return df_assistants


def _delete(df_assistants: pd.DataFrame, openai_client: openai.OpenAI) -> None:
    for assistant_id in df_assistants["assistant_id"]:
        openai_client.beta.assistants.delete(assistant_id=assistant_id)


def _create(df_assistants: pd.DataFrame, character_by_id: Dict[str, CharacterDescription], instruction: str, openai_client: openai.OpenAI) -> pd.Series:
    assistant_ids = []
    for _, row in df_assistants.iterrows():
        character_id = row["character_id"]
        character = character_by_id[character_id]
        instruction_formatted = instruction.format(**character.model_dump())
        assistant_name = f"{character.character_id} - {character.name}"
        assistant = openai_client.beta.assistants.create(
            name=assistant_name,
            instructions=instruction_formatted,
            tools=[
                {"type": "code_interpreter"},
                {"type": "retrieval"},
            ],
            model="gpt-4-turbo-preview"
        )
        assistant_ids.append(assistant.id)
    return pd.Series(assistant_ids, index=df_assistants.index)


def _update(df_assistants: pd.DataFrame, character_by_id: Dict[str, CharacterDescription], instruction: str, openai_client: openai.OpenAI) -> None:
    for _, row in df_assistants.iterrows():
        character_id = row["character_id"]
        assistant_id = row["assistant_id"]
        character = character_by_id[character_id]
        instruction_formatted = instruction.format(**character.model_dump())
        assistant_name = f"{character.character_id} - {character.name}"

        retrieved_assistant = openai_client.beta.assistants.retrieve(assistant_id=assistant_id)
        openai_client.beta.assistants.update(
            assistant_id=assistant_id,
            name=assistant_name,
            instructions=instruction_formatted,
            tools=retrieved_assistant.tools,
            model=retrieved_assistant.model,
        )


def process(file_name_characters: str, file_name_instruction: str, file_name_assistants: str, file_name_openai_api_key: str):
    print("Reading characters set")
    characters = load_characters(file_name_characters)
    print("Reading instruction")
    instruction = _read_text_file(file_name_instruction)
    print("Reading OpenAI api key")
    openai_api_key = _read_text_file(file_name_openai_api_key)
    print("Reading existing assistants (if any)")
    df_assistants = _load_assistants_dataframe(file_name_assistants)

    print("Preparing to update assistants")
    character_by_id = {
        character.character_id: character
        for character in characters
    }
    openai_client = openai.OpenAI(api_key=openai_api_key)
    df_assistants = _mark_actions(df_assistants, character_by_id)

    print("Removing nonrequired assistants")
    _delete(df_assistants.loc[df_assistants["action"] == _ACTION_DELETE], openai_client)
    df_assistants = df_assistants.loc[df_assistants["action"] != _ACTION_DELETE]

    print("Creating new assistants")
    df_assistants.loc[df_assistants["action"] == _ACTION_CREATE, "assistant_id"] = _create(
        df_assistants.loc[df_assistants["action"] == _ACTION_CREATE],
        character_by_id,
        instruction,
        openai_client,
    )

    print("Updating existing assistants")
    _update(df_assistants, character_by_id, instruction, openai_client)

    print("Saving response")
    df_assistants[["assistant_id", "character_id"]].to_csv(file_name_assistants, index=False)

# %% ../nbs/00_assistants.ipynb 10
if __name__ == "__main__" and "ipykernel_launcher" not in " ".join(sys.argv):
    parser = argparse.ArgumentParser()
    parser.add_argument("--file_name_characters",
                        type=str,
                        required=True,
                        help="YAML with characters descriptions")
    parser.add_argument("--file_name_instruction",
                        type=str,
                        required=True,
                        help="Instruction template")
    parser.add_argument("--file_name_assistants",
                        type=str,
                        required=True,
                        help="Existing assistant-character mapping (CSV)")
    parser.add_argument("--file_name_openai_api_key",
                        type=str,
                        required=True,
                        help="OpenAI api key file")
    process(**vars(parser.parse_args()))
